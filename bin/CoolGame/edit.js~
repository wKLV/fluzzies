CoolGame.start = function(){
    var map = {
        emitter: {
            sequence:[{cooly: new COOLY(), many:100, time:0, lastTime:0}],
            position:[85,85]
        },
        catcher: {
            position:[85, 700]
        },
        grounds:[
        ]
    },
    emitter = new COOLYEMITTER(map.emitter),
    scene = new Scene(document.body, document.body.clientWidth, document.body.clientHeight),
    base = emitter.createVisual().moveTo(map.emitter.position[0], map.emitter.position[1]),
    basein = (new Sprite).fill("assets/in.png").size(150, 150).moveTo(map.catcher.position[0], map.catcher.position[1]),
    anti = new Sprite().size(100,100).fill("assets/anti.png"),
    edit = new Label().text("Edit mode").moveTo(1200, 10),
    save = new Label().text("Save map").moveTo(1200, 60);
    layer = new Node,
    groundv = new Polygon().fill(5,200,10).moveTo(0,0);
    background = new Sprite().size(4000, 2000).fill(0, 150, 250),

    mode = "TEST", shape = [];
    layer.add(groundv);
    scene.add(background);
    scene.add(base);
    scene.add(basein);
    scene.add(save)
    scene.add(edit);

    var balls = {}, ids=0;
    var gravity = new box2d.Vec2(0, 100);
    var bounds = new box2d.AABB();
    bounds.minVertex.Set(-document.body.clientWidth, -document.body.clientHeight);
    bounds.maxVertex.Set(2*document.body.clientWidth,2*document.body.clientHeight);
    var world = new box2d.World(bounds, gravity, false);

    var ground = new box2d.PolyDef;
    ground.restitution = .6
    ground.density = 0;
    ground.friction = 1;

    var ballDef = new box2d.CircleDef;
    ballDef.radius = 15;
    ballDef.density = 1;
    ballDef.restitution = 0.2;
    ballDef.friction = 1;


    var bin = new box2d.PolyDef;
    bin.density = 0;
    bin.SetVertices([[-75,75],[-75,-75],[75,-75],[75,75]])

    var binbodydef = new box2d.BodyDef;
    binbodydef.position.Set(1200, 700)
    binbodydef.AddShape(bin);

    binbodydef.userData = {name:"in"}
    var binbody = world.CreateBody(binbodydef);
    scene.add(layer);
    scene.add(anti);

    var listener = {};
    listener.BeginContact = function(a,b){
        if(a.GetUserData().name === "cooly"){
            if(b.GetUserData().name === "spikes"){
                world.DestroyBody(a);
                layer.rem(a.GetUserData().visual);
            }
            else if(b.GetUserData().name === "in"){
                world.DestroyBody(a);
                layer.rem(a.GetUserData().visual);
            }
        }
        else if(b.GetUserData().name === "cooly"){
            if(a.GetUserData().name === "spikes"){
                world.DestroyBody(b);
                layer.rem(b.GetUserData().visual);
            }
            else if(a.GetUserData().name === "in"){
                world.DestroyBody(b);
                layer.rem(b.GetUserData().visual);
            }
}
    }
    lime.scheduleManager.schedule(function(dt) { if(mode === "TEST"){
        $.each(balls, function(i,v){
            var d = v.physics.GetCenterPosition().Copy().subtract(anti.getPos());
            var dlength = d.Normalize()
            if(dlength < 250)
                v.physics.ApplyImpulse(box2d.Vec2.multiplyScalar(650000/(dlength^2), d), anti.getPos());
        });

        world.Step(dt / 1000, 3);
        $.each(balls, function(i,v){
            var pos = v.physics.GetCenterPosition().clone();
            var rot = v.physics.GetRotation();

            v.visual.rotation(-rot/Math.PI*180);
            v.visual.moveTo(pos.x, pos.y);
        });
        var c = emitter.getNext(dt);
        if(c){
            ids ++;
            var c = c.createVisual();
            var v = new box2d.BodyDef;
            v.userData = {name:"cooly", visual:c};;
            v.position.Set(85, 125);
            v.angularDamping = 0;
            v.id = ids;
            v.AddShape(ballDef);
            v = world.CreateBody(v);
            balls[ids] = {visual:c, physics:v};
            layer.add(c);
        }
        for(var c=world.GetContactList(); c; c = c.GetNext()){
            listener.BeginContact(c.getBodies()[0], c.getBodies()[1]);
        }
    }},this);

    edit.event(["mousedown", "touchstart"], function(e){
        if(mode === "TEST") mode = "EDIT"
        else{
            mode = "TEST"
            var c = new box2d.Vec2();
            var a = 0;
            for(var i = 0; i< shape.length-1; i++){
                a+= 0.5*(shape[i].x*shape[i+1].y -shape[i+1].x*shape[i].y)
            }
            if(a < 0) shape.reverse();
            for ( i=0; i < shape.length-1; i++ ) {
                c.x += (shape[i].x + shape[i+1].x)*(shape[i].y*shape[i+1].x -shape[i].x*shape[i+1].y)/(6*a);
                c.y += (shape[i].y + shape[i+1].y)*(shape[i].y*shape[i+1].x -shape[i].x*shape[i+1].y)/(6*a);
             }
             var l = [];
            $.each(shape, function(i,v){
                shape[i] = box2d.Vec2.subtract(v,c);
                l.push([shape[i].x, shape[i].y])
            });

            map.grounds.push({shape:shape, position:c});

            ground = new box2d.PolyDef;
            ground.restitution = .6
            ground.density = 0;
            ground.friction = 1;
            ground.SetVertices(l);
            var gbody = new box2d.BodyDef;
            gbody.position.Set(c.x, c.y);
            gbody.AddShape(ground);
            gbody.userData = {name:"ground"}

            layer.rem(groundv);
            var vis = new Polygon(shape).fill(5,200,10).moveTo(c.x, c.y);
            layer.add(vis);

            shape = [];
            world.CreateBody(gbody);
        }
    });

    save.event(["mousedown"], function(e){
        window.location.href = "data:application/x-download;charset=utf-8," + encodeURIComponent(JSON.stringify(map));
    });

    background.event(["mousedown", "touchstart"], function(e){
        if(mode === "TEST") anti.moveTo(e.position.x, e.position.y);
        else {
            if(e.position.x>1100) return;
            shape.push(e.position);
            layer.rem(groundv);
            groundv.setShape(shape);
            layer.add(groundv);
        }
    });
}
goog.exportSymbol('CoolGame.start', CoolGame.start);

$(document).ready(function(){
 /*   var renderer = new THREE.WebGLRenderer({antialias:true});
    var body = document.body, html = document.documentElement;
    renderer.setSize( document.body.clientWidth, Math.max( body.scrollHeight, body.offsetHeight,
            html.clientHeight, html.scrollHeight, html.offsetHeight ) );
    document.body.appendChild(renderer.domElement);
    renderer.setClearColorHex(0x111111, 1.0);
    renderer.clear();

    var scene = new THREE.Scene;
    var camera = new THREE.PerspectiveCamera(
        35,         // Field of view
        800 / 640,  // Aspect ratio
        .1,         // Near
        10000       // Far
    );
    camera.position.set(0,0 ,10);


    var cube = function(){return new THREE.Mesh(
        new THREE.CubeGeometry(0.5,0.5,0.5),
        new THREE.MeshLambertMaterial({color:0x444444})
    )}

    scene.add(camera);

    var directionallight = new THREE.DirectionalLight(0xffffff, 1.5);
    directionallight.position.set(1, -1, 3);
    scene.add(directionallight);

*/
/*    var render = function(time){
        renderer.render(scene, camera);
        var c = emitter.getNext(time);
        if(c){
            var c = cube();

            scene.add(c);
        }
        requestAnimationFrame(render);
}

    requestAnimationFrame(render);
*/

});

